require:
- rubocop-rake
- rubocop-rspec
AllCops:
  TargetRubyVersion: 3.0
Capybara:
  Enabled: false
FactoryBot:
  Enabled: false
Gemspec/DeprecatedAttributeAssignment:
  Enabled: true
Gemspec/DevelopmentDependencies:
  Enabled: true
Gemspec/RequireMFA:
  Enabled: false
Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation
Layout/BeginEndAlignment:
  Enabled: true
Layout/CaseIndentation:
  EnforcedStyle: end
Layout/EndOfLine:
  EnforcedStyle: lf
Layout/EmptyLineAfterGuardClause:
  Enabled: false # reason: unnecessary extra space
Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: true
Layout/FirstArgumentIndentation:
  Enabled: true
Layout/HashAlignment:
  Enabled: true
Layout/HeredocIndentation:
  Enabled: false # reason: makes it harder to understand what indentation is significant
Layout/IndentationWidth:
  Enabled: true
Layout/LeadingCommentSpace:
  Enabled: false # reason: this is just nitpicky
Layout/LineContinuationLeadingSpace:
  Enabled: true
Layout/LineContinuationSpacing:
  Enabled: true
Layout/LineEndStringConcatenationIndentation:
  Enabled: true
Layout/LineLength:
  Enabled: true
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented
Layout/ParameterAlignment:
  EnforcedStyle: with_fixed_indentation
  IndentationWidth: 4
Layout/RescueEnsureAlignment:
  Enabled: true
Layout/SpaceAroundMethodCallOperator:
  Enabled: true
Layout/SpaceAroundOperators:
  Enabled: true
  EnforcedStyleForExponentOperator: space
Layout/SpaceBeforeBrackets:
  Enabled: true
Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: false
Lint/AmbiguousAssignment:
  Enabled: true
Lint/AmbiguousBlockAssociation:
  Enabled: true # NOTE this is pedantic when using braces for single-line blocks
Lint/AmbiguousOperatorPrecedence:
  Enabled: false
Lint/AmbiguousRange:
  Enabled: true
Lint/BinaryOperatorWithIdenticalOperands:
  Enabled: true
Lint/ConstantDefinitionInBlock:
  Enabled: true
Lint/ConstantOverwrittenInRescue:
  Enabled: true
Lint/DeprecatedConstants:
  Enabled: true
Lint/DeprecatedOpenSSLConstant:
  Enabled: true
Lint/DuplicateBranch:
  Enabled: true
Lint/DuplicateElsifCondition:
  Enabled: true
Lint/DuplicateMagicComment:
  Enabled: true
Lint/DuplicateMatchPattern:
  Enabled: true
Lint/DuplicateRegexpCharacterClassElement:
  Enabled: true
Lint/DuplicateRequire:
  Enabled: true
Lint/DuplicateRescueException:
  Enabled: true
Lint/EmptyBlock:
  Enabled: true
Lint/EmptyClass:
  Enabled: true
Lint/EmptyConditionalBody:
  Enabled: true
Lint/EmptyFile:
  Enabled: true
Lint/EmptyInPattern:
  Enabled: true
Lint/EmptyWhen:
  Enabled: false # reason: an empty when can be important for excluding matches
Lint/FloatComparison:
  Enabled: true
Lint/IdentityComparison:
  Enabled: true
Lint/IncompatibleIoSelectWithFiberScheduler:
  Enabled: true
Lint/LambdaWithoutLiteralBlock:
  Enabled: true
Lint/MissingSuper:
  Enabled: true
Lint/MixedCaseRange:
  Enabled: true
Lint/MixedRegexpCaptureTypes:
  Enabled: true
Lint/NoReturnInBeginEndBlocks:
  Enabled: true
Lint/NonAtomicFileOperation:
  Enabled: true
Lint/NumberedParameterAssignment:
  Enabled: true
Lint/OrAssignmentToConstant:
  Enabled: true
Lint/OutOfRangeRegexpRef:
  Enabled: true
Lint/ParenthesesAsGroupedExpression:
  Enabled: false # reason: we prefer to enclose assignments
Lint/RaiseException:
  Enabled: true
Lint/RedundantDirGlobSort:
  Enabled: true
Lint/RedundantRegexpQuantifiers:
  Enabled: true
Lint/RefinementImportMethods:
  Enabled: true
Lint/RequireRangeParentheses:
  Enabled: true
Lint/RequireRelativeSelfPath:
  Enabled: true
Lint/SelfAssignment:
  Enabled: true
Lint/StructNewOverride:
  Enabled: true
Lint/SuppressedException:
  Enabled: true
Lint/SymbolConversion:
  Enabled: true
Lint/ToEnumArguments:
  Enabled: true
Lint/TopLevelReturnWithArgument:
  Enabled: true
Lint/TrailingCommaInAttributeDeclaration:
  Enabled: true
Lint/TripleQuotes:
  Enabled: true
Lint/UnexpectedBlockArity:
  Enabled: true
Lint/UnmodifiedReduceAccumulator:
  Enabled: true
Lint/UnreachableLoop:
  Enabled: true
Lint/UnusedMethodArgument:
  Enabled: true
Lint/UselessMethodDefinition:
  Enabled: true
Lint/UselessRescue:
  Enabled: true
Lint/UselessRuby2Keywords:
  Enabled: true
Lint/UselessTimes:
  Enabled: true
Metrics/AbcSize:
  Enabled: false
Metrics/BlockLength:
  Enabled: false
Metrics/BlockNesting:
  Max: 10
Metrics/ClassLength:
  Enabled: false
Metrics/CollectionLiteralLength:
  Enabled: true
Metrics/CyclomaticComplexity:
  Enabled: false
Metrics/MethodLength:
  Enabled: false
Metrics/ModuleLength:
  Enabled: false
Metrics/ParameterLists:
  Max: 10
  MaxOptionalParameters: 10
Metrics/PerceivedComplexity:
  Enabled: false
Naming/AccessorMethodName:
  Enabled: true
Naming/BlockForwarding:
  Enabled: true
Naming/ConstantName:
  Enabled: false # FIXME consider reenabling
Naming/FileName:
  Enabled: false
Naming/HeredocDelimiterNaming:
  Enabled: true
  ForbiddenDelimiters:
  - !ruby/regexp '/^\s*EO[A-Z]\s*$/'
Naming/InclusiveLanguage:
  Enabled: false
Naming/MethodParameterName:
  Enabled: true
Naming/PredicateName:
  Enabled: false # reason: Jekyll has methods that have this name we need to override
Naming/VariableNumber:
  Enabled: false # reason: this is just nitpicky
RSpec:
  Language:
    ExampleGroups:
      Regular:
      - describe_method
RSpec/BeEmpty:
  Enabled: true
RSpec/BeEq:
  Enabled: true
RSpec/BeEql:
  Enabled: false # NOTE can lead to cryptic error messages when comparing integers
RSpec/BeNil:
  Enabled: true
RSpec/BeforeAfterAll:
  Enabled: true
RSpec/ChangeByZero:
  Enabled: true
RSpec/ClassCheck:
  Enabled: true
RSpec/ContainExactly:
  Enabled: true
RSpec/ContextWording:
  Enabled: false
RSpec/DescribeClass:
  Enabled: false
RSpec/DuplicatedMetadata:
  Enabled: true
RSpec/EmptyExampleGroup:
  Enabled: true
RSpec/EmptyMetadata:
  Enabled: true
RSpec/Eq:
  Enabled: true
RSpec/ExampleLength:
  Enabled: false
RSpec/ExampleWording:
  Enabled: false
RSpec/ExcessiveDocstringSpacing:
  Enabled: true
RSpec/ExpectInHook:
  Enabled: true
RSpec/FilePath:
  Enabled: false
RSpec/IdenticalEqualityAssertion:
  Enabled: true
RSpec/IndexedLet:
  Enabled: true
RSpec/MatchArray:
  Enabled: true
RSpec/MetadataStyle:
  Enabled: true
RSpec/MultipleExpectations:
  Enabled: true
  Max: 15
RSpec/MultipleMemoizedHelpers:
  Enabled: true
  Max: 10
RSpec/NamedSubject:
  Enabled: false
RSpec/NoExpectationExample:
  Enabled: false
RSpec/Pending:
  Enabled: true
RSpec/PendingWithoutReason:
  Enabled: true
RSpec/Rails:
  Enabled: false
RSpec/ReceiveMessages:
  Enabled: true
RSpec/RedundantAround:
  Enabled: true
RSpec/SkipBlockInsideExample:
  Enabled: true
RSpec/SortMetadata:
  Enabled: true
RSpec/SpecFilePathFormat:
  Enabled: false
RSpec/SpecFilePathSuffix:
  Enabled: true
RSpec/SubjectDeclaration:
  Enabled: true
RSpec/VerifiedDoubleReference:
  Enabled: true
RSpec/VoidExpect:
  Enabled: false
Security/CompoundHash:
  Enabled: true
Security/IoMethods:
  Enabled: true
Security/Open:
  Enabled: true
Style/AccessorGrouping:
  Enabled: true
  EnforcedStyle: separated
Style/Alias:
  Enabled: true
  EnforcedStyle: prefer_alias
Style/ArgumentsForwarding:
  Enabled: true
Style/ArrayCoercion:
  Enabled: false # reason: using [*values] is faster
Style/ArrayIntersect:
  Enabled: true
Style/AsciiComments:
  Enabled: false # reason: this is just nitpicky
Style/Attr:
  Enabled: true
Style/BisectedAttrAccessor:
  Enabled: true
Style/BlockComments:
  Enabled: true
Style/BlockDelimiters:
  EnforcedStyle: line_count_based # FIXME we want this to be line_count_based except when chaining
Style/CaseEquality:
  Enabled: false # reason: === is a useful operator
Style/CaseLikeIf:
  Enabled: true
Style/CharacterLiteral:
  Enabled: false # reason: ? can make single characters easier to type
Style/ClassAndModuleChildren:
  Enabled: false # reason: both forms are useful
Style/ClassVars:
  Enabled: false # reason: an important language feature
Style/CollectionCompact:
  Enabled: true
Style/CombinableLoops:
  Enabled: true
Style/CommandLiteral:
  EnforcedStyle: percent_x
Style/CommentAnnotation:
  Enabled: true
  Keywords:
  - TODO
  - FIXME
  - HACK
  - NOTE
  - QUESTION
  RequireColon: false
Style/ComparableClamp:
  Enabled: true
Style/ConcatArrayLiterals:
  Enabled: true
Style/ConditionalAssignment:
  EnforcedStyle: assign_inside_condition
  IncludeTernaryExpressions: false
Style/DataInheritance:
  Enabled: true
Style/DirEmpty:
  Enabled: true
Style/DocumentDynamicEvalDefinition:
  Enabled: true
Style/Documentation:
  Enabled: false # FIXME reenable
Style/DoubleNegation:
  Enabled: true
Style/EmptyHeredoc:
  Enabled: true
Style/EmptyLiteral:
  Enabled: true
Style/EndlessMethod:
  Enabled: true
Style/EnvHome:
  Enabled: true
Style/ExactRegexpMatch:
  Enabled: true
Style/ExplicitBlockArgument:
  Enabled: false # reason: yield is fine
Style/ExponentialNotation:
  Enabled: true
Style/FetchEnvVar:
  Enabled: false # reason: just no
Style/FileEmpty:
  Enabled: true
Style/FileRead:
  Enabled: true
Style/FileWrite:
  Enabled: true
Style/FormatString:
  EnforcedStyle: sprintf
Style/FormatStringToken:
  Enabled: true
  EnforcedStyle: unannotated
Style/GlobalStdStream:
  Enabled: true
Style/GuardClause:
  Enabled: true
Style/HashConversion:
  Enabled: true
Style/HashAsLastArrayItem:
  Enabled: true
  EnforcedStyle: no_braces
Style/HashEachMethods:
  Enabled: true
Style/HashExcept:
  Enabled: true
Style/HashLikeCase:
  Enabled: true
Style/HashSyntax:
  EnforcedStyle: ruby19
Style/HashTransformKeys:
  Enabled: true
Style/HashTransformValues:
  Enabled: true
Style/IfWithBooleanLiteralBranches:
  Enabled: true
  AllowedMethods:
  - empty?
Style/IfUnlessModifier:
  Enabled: false # reason: this gets crazy
Style/IfUnlessModifierOfIfUnless:
  Enabled: false # reason: we prefer this style to avoid extra nesting
Style/InPatternThen:
  Enabled: true
Style/InfiniteLoop:
  Enabled: false # reason: loop is measurably slower than while true
Style/KeywordParametersOrder:
  Enabled: true
Style/MagicCommentFormat:
  Enabled: true
Style/MapCompactWithConditionalBlock:
  Enabled: true
Style/MapToHash:
  Enabled: false # reason: not supported in JRuby < 9.3
Style/MapToSet:
  Enabled: true
Style/MethodCallWithArgsParentheses:
  Enabled: true
  EnforcedStyle: omit_parentheses
Style/MethodDefParentheses:
  EnforcedStyle: require_no_parentheses
Style/MinMaxComparison:
  Enabled: true
Style/MultilineBlockChain:
  Enabled: false # reason: no reason not to allow method call on block result
Style/MultilineInPatternThen:
  Enabled: true
Style/MultilineIfModifier:
  Enabled: false # reason: we prefer this style to avoid extra nesting
Style/MultilineTernaryOperator:
  Enabled: false # reason: a ternary is a ternary
Style/MultipleComparison:
  Enabled: false # reason: faster than the alternative of using Array#include?
Style/MutableConstant:
  Enabled: false # reason: freezing constants is pendantic
Style/NegatedIfElseCondition:
  Enabled: true
Style/NestedFileDirname:
  Enabled: true
Style/NestedParenthesizedCalls:
  Enabled: true
Style/NestedTernaryOperator:
  Enabled: false # reason: a ternary is a ternary
Style/NilLambda:
  Enabled: true
Style/NumberedParameters:
  Enabled: true
Style/NumberedParametersLimit:
  Enabled: true
Style/NumericLiterals:
  Enabled: false # reason: makes large numbers unreadable and harder to copy
Style/NumericPredicate:
  EnforcedStyle: comparison
Style/ObjectThen:
  Enabled: true
Style/OpenStructUse:
  Enabled: true
Style/OperatorMethodCall:
  Enabled: true
Style/OptionalBooleanParameter:
  Enabled: false # reason: invasive
Style/ParallelAssignment:
  Enabled: false # reason: an important language feature
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    default: "()"
    "%i": "()"
    "%r": "//"
    "%w": "()"
    "%W": "()"
Style/PerlBackrefs:
  Enabled: false # reason: an important language feature
Style/QuotedSymbols:
  Enabled: true
Style/RedundantArgument:
  Enabled: true
Style/RedundantArrayConstructor:
  Enabled: true
Style/RedundantAssignment:
  Enabled: true
Style/RedundantBegin:
  Enabled: true
Style/RedundantConstantBase:
  Enabled: true
Style/RedundantCurrentDirectoryInPath:
  Enabled: true
Style/RedundantDoubleSplatHashBraces:
  Enabled: true
Style/RedundantEach:
  Enabled: true
Style/RedundantFetchBlock:
  Enabled: true
Style/RedundantFileExtensionInRequire:
  Enabled: true
Style/RedundantFilterChain:
  Enabled: true
Style/RedundantHeredocDelimiterQuotes:
  Enabled: true
Style/RedundantInitialize:
  Enabled: true
Style/RedundantLineContinuation:
  Enabled: true
Style/RedundantPercentQ:
  Enabled: true
Style/RedundantRegexpCharacterClass:
  Enabled: true
Style/RedundantRegexpArgument:
  Enabled: true
Style/RedundantRegexpConstructor:
  Enabled: true
Style/RedundantRegexpEscape:
  Enabled: true
Style/RedundantSelfAssignment:
  Enabled: true
Style/RedundantSelfAssignmentBranch:
  Enabled: false
Style/RedundantStringEscape:
  Enabled: true
Style/RegexpLiteral:
  Enabled: true
Style/RescueModifier:
  Enabled: false # reason: a useful language feature
Style/RescueStandardError:
  EnforcedStyle: implicit
Style/ReturnNilInPredicateMethodDefinition:
  Enabled: true
Style/MissingRespondToMissing:
  Enabled: true
Style/SafeNavigation:
  Enabled: true
Style/SelectByRegexp:
  Enabled: true
Style/SingleArgumentDig:
  Enabled: true
Style/SingleLineDoEndBlock:
  Enabled: true
Style/SlicingWithRange:
  Enabled: false # reason: not supported in JRuby < 9.3
Style/SoleNestedConditional:
  Enabled: true
Style/SpecialGlobalVars:
  EnforcedStyle: use_perl_names
Style/StderrPuts:
  Enabled: true
Style/StringChars:
  Enabled: true
Style/StringConcatenation:
  Enabled: false # reason: string concatenation can be faster
Style/SwapValues:
  Enabled: true
Style/SymbolArray:
  EnforcedStyle: brackets
Style/SymbolProc:
  Enabled: false # reason: using a symbol proc is measurably slower than using a block in Opal and Ruby < 3
Style/TernaryParentheses:
  Enabled: false # reason: this rule has become too buggy and gets it wrong most of the time
  EnforcedStyle: require_no_parentheses
Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: consistent_comma
Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: consistent_comma
Style/WordArray:
  Enabled: true
Style/YAMLFileRead:
  Enabled: true
